{"version":3,"sources":["app/Header.js","app/MessageList.js","app/MessageInput.js","app/Main.js","app/Footer.js","app/ChangeUser.js","app/App.js","serviceWorker.js","app/store.js","index.js"],"names":["connect","state","user","dispatch","openChangeUserWindow","type","props","className","onClick","icon","faUser","size","MessageList","this","scrollToBottom","maxScrollTop","messageListDiv","scrollHeight","clientHeight","scrollTop","ref","div","messagesList","map","item","idx","key","from","Date","time","toLocaleString","month","day","hour","hourCycle","minute","message","React","Component","MessageInput","handleChange","bind","handleSubmit","e","currentTextOfMessageToSend","target","value","preventDefault","event","onTextMessageToSend","onSubmit","fromStateCurrentTextOfMessageToSend","placeholder","onChange","faPaperPlane","messagetext","Main","Footer","ChangeUser","newUserName","changeUserName","localStorage","setItem","JSON","stringify","setState","closeChangeUserWindow","isOpenWindowToChangeUserName","faTimes","App","handleTextMessageToSend","ws","WebSocket","getItem","localUser","parse","onopen","Notification","permission","body","requestPermission","then","onmessage","data","document","hidden","msg","reverse","currentMessagesList","push","updateMessagesList","onclose","console","log","myMessage","send","Fragment","changeUserWindowOpen","newMessagesList","Boolean","window","location","hostname","match","store","createStore","action","Object","assign","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ea57ca08.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Header.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\n\nconst Header = (props) => (\n  <header className=\"App-header\">\n      <h1>CHAT</h1>\n      <div className=\"header-user-container\">\n        <p className=\"header-user-username\">\n          {props.user}\n        </p>\n        <div className=\"header-user-icon\">\n          <FontAwesomeIcon\n            onClick={props.openChangeUserWindow}         \n            icon={ faUser }\n            size=\"2x\"\n          />\n        </div>\n      </div>\n  </header>\n)\n\nconst mapDispatchToProps = dispatch => ({\n  openChangeUserWindow: () => dispatch({\n    type: 'OPEN_WINDOW_TO_CHANGE_USER_NAME'\n  })\n})\n\nconst mapStateToProps = state => ({\n  user: state.user,\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\n","import React from 'react';\nimport '../styles/MessageList.css';\nimport { connect } from 'react-redux';\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  \n  componentDidMount() {\n    this.scrollToBottom()\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom()  \n  }\n\n  scrollToBottom() {\n    const scrollHeight = this.messageListDiv.scrollHeight;\n    const height = this.messageListDiv.clientHeight;\n    const maxScrollTop = scrollHeight - height;\n    this.messageListDiv.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\n  }\n  \n  render () {\n    return (\n      <div className=\"main-messagelist-container\"\n        ref={(div) => {\n          this.messageListDiv = div;\n        }}\n      >\n          <ul >\n            {this.props.messagesList\n            .map((item, idx) => \n              <li\n              key={idx}\n              className=\"messagelist-item\">\n                <p className=\"messagelist-user\">{item.from}</p>\n                <p className=\"messagelist-time\">{new Date(item.time).toLocaleString('en',\n                  {\n                    month: 'long',\n                    day: 'numeric',\n                    hour: 'numeric',\n                    hourCycle: 'h23',\n                    minute: 'numeric'\n                  })}\n                </p>\n                <p className=\"messagelist-text\">{item.message}</p>\n              </li>)}\n          </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n   messagesList: state.messagesList,\n   user: state.user,\n})\n\nexport default connect(mapStateToProps, {})(MessageList);\n","import React from 'react';\nimport '../styles/MessageInput.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\n\n\nclass MessageInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.currentTextOfMessageToSend(e.target.value);\n    e.preventDefault();\n  }\n  \n  handleSubmit(event) {\n    this.props.onTextMessageToSend(this.props.currentTextOfMessageToSend);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form\n        className=\"main-messageinput-container\"\n        onSubmit={this.handleSubmit}\n      >\n        <input\n          type=\"text\"\n          value={this.props.fromStateCurrentTextOfMessageToSend} \n          placeholder=\"Type your message here\"\n          onChange={this.handleChange} \n        />\n        <button\n          type=\"submit\"\n        >\n        <FontAwesomeIcon\n          icon={ faPaperPlane }\n        />\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  fromStateCurrentTextOfMessageToSend: state.currentTextOfMessageToSend\n})\n\nconst mapDispatchToProps = dispatch => ({\n  currentTextOfMessageToSend: messagetext => dispatch({\n    type: 'UPDATE_MESSAGE_TEXT_TO_SEND', currentTextOfMessageToSend: messagetext\n  }),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageInput);\n","import React from 'react';\nimport '../styles/Main.css';\n\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\n\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n\n  render() {\n    return (\n      <main className=\"App-main\">\n          <MessageList />\n          <MessageInput\n            onTextMessageToSend={this.props.onTextMessageToSend}\n          />\n      </main>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\nimport '../styles/Footer.css';\n\nconst Footer = () => (\n    <footer className=\"App-footer\">\n        <p>RS School Task</p>\n    </footer>\n)\n\nexport default Footer;","import React from 'react';\nimport '../styles/ChangeUser.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\n\n\nclass ChangeUser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newUserName: '',\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  \n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.newUserName !== '') {\n      this.props.changeUserName(this.state.newUserName);\n      localStorage.setItem('RSChatUser', JSON.stringify(this.state.newUserName));\n      this.setState({\n        newUserName: \"\"\n      });\n    }\n    this.props.closeChangeUserWindow();\n  }\n\n  handleChange(e) {\n    this.setState({\n      newUserName: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <header\n        className={`App-changeuser ${this.props.isOpenWindowToChangeUserName ? \"open\" : \"\"}`} \n      >\n        <button\n          className=\"changeuser-button-close\"\n          onClick={this.props.closeChangeUserWindow}\n        >\n          <FontAwesomeIcon         \n            icon={ faTimes }\n            size=\"2x\"\n          />\n        </button>\n        <h2>{`${this.props.user === 'Anonymus' ? `Set` : `Change`} User Name`}</h2>\n        <div className=\"changeuser-user-icon\">\n        <FontAwesomeIcon         \n            icon={ faUser }\n            size=\"4x\"\n          />\n        </div>\n        <p className=\"changeuser-user-name\">{this.props.user}</p>\n        <form\n          className=\"changeuser-form\"\n          onSubmit={this.handleSubmit}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Type new user name\"\n            onChange={this.handleChange} \n          />\n          <button type=\"submit\" >Change</button>\n        </form>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isOpenWindowToChangeUserName: state.isOpenWindowToChangeUserName,\n  user: state.user,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  changeUserName: newUserName => dispatch({\n    type: 'CHANGE_USER_NAME', user: newUserName\n  }),\n  closeChangeUserWindow: () => dispatch({\n    type: 'CLOSE_WINDOW_TO_CHANGE_USER_NAME'\n  })\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeUser)\n","import React from 'react';\n\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport ChangeUser from './ChangeUser';\nimport { connect } from 'react-redux';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTextMessageToSend = this.handleTextMessageToSend.bind(this);\n    this.ws = new WebSocket(\"ws://st-chat.shas.tel\"); \n  }\n  \n  componentDidMount() {\n    //setting User\n    if (localStorage.getItem('RSChatUser') && localStorage.getItem('RSChatUser') !== 'undefined') {\n      let localUser = JSON.parse(localStorage.getItem('RSChatUser'));\n      this.props.changeUserName(localUser)\n    } else {\n      this.props.openChangeUserWindow() \n    }\n\n    // websockets\n    this.ws.onopen = event => {\n      if (Notification.permission === \"granted\") {\n        // create a notification\n        var notification = new Notification('RS School CHAT', {body: \"Notifications active\"});\n      } else if (Notification.permission !== \"denied\") {\n        Notification.requestPermission().then(function (permission) {\n          // If the user accepts, let's create a notification\n          if (permission === \"granted\") {\n            var notification = new Notification('RS School CHAT', {body: \"Notifications active\"});\n          }\n        })\n      }\n    }\n    this.ws.onmessage = event => {\n      let message = JSON.parse(event.data);\n      if (document.hidden && Notification.permission === \"granted\") {\n        message.map(msg => new Notification('RS School CHAT', {body: `${msg.from}: ${msg.message}`}))\n      }\n      message.reverse();\n      let currentMessagesList = [...this.props.messagesList];\n      message.map(msg => currentMessagesList.push(msg));\n      this.props.updateMessagesList(currentMessagesList);\n    }\n    this.ws.onclose = event => {\n      console.log(\"CLOSE\", event)\n    }\n  }\n  \n  handleTextMessageToSend() {\n    const myMessage = {\n      from: this.props.user,\n      message: this.props.fromStateCurrentTextOfMessageToSend,\n    }\n    this.ws.send(JSON.stringify(myMessage))\n    this.props.currentTextOfMessageToSend('')\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <Main\n          onTextMessageToSend={this.handleTextMessageToSend}\n          />\n        <Footer />\n        <ChangeUser />\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  changeUserWindowOpen: state.isOpenWindowToChangeUserName,\n  user: state.user,\n  fromStateCurrentTextOfMessageToSend: state.currentTextOfMessageToSend,\n  messagesList: state.messagesList,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  changeUserName: newUserName => dispatch({\n    type: 'CHANGE_USER_NAME', user: newUserName\n  }),\n  openChangeUserWindow: () => dispatch({\n    type: 'OPEN_WINDOW_TO_CHANGE_USER_NAME'\n  }),\n  currentTextOfMessageToSend: messagetext => dispatch({\n    type: 'UPDATE_MESSAGE_TEXT_TO_SEND', currentTextOfMessageToSend: messagetext\n  }),\n  updateMessagesList: newMessagesList => dispatch({\n    type: 'UPDATE_MESSAGES_LIST', messagesList: newMessagesList\n  }),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore } from 'redux';\n\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(\n    reducer, /* preloadedState, */\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n   );\n  /* eslint-enable */ \n  \n  function reducer(state = \n      {\n        isOpenWindowToChangeUserName: false,\n        user: 'Anonymus',\n        currentTextOfMessageToSend: '',\n        messagesList: [],\n      }\n    , action) {\n   switch (action.type) {\n     case 'OPEN_WINDOW_TO_CHANGE_USER_NAME':\n      return Object.assign(\n        {}, state, {isOpenWindowToChangeUserName: true}\n      )\n     case 'CLOSE_WINDOW_TO_CHANGE_USER_NAME':\n      return Object.assign(\n        {}, state, {isOpenWindowToChangeUserName: false}\n      )\n     case 'CHANGE_USER_NAME': \n       return Object.assign(\n         {}, state, {user: action.user}\n       )\n     case 'UPDATE_MESSAGE_TEXT_TO_SEND':\n       return Object.assign(\n         {}, state, {currentTextOfMessageToSend: action.currentTextOfMessageToSend}\n       )\n     case 'UPDATE_MESSAGES_LIST':\n     return Object.assign(\n         {}, state, {messagesList: action.messagesList}\n       )\n     default:\n       return state\n   }\n  }\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './app/store'\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}